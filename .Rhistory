tmp$hour <- hour(tmp$Timestamp)
tmp$date <- as.Date(tmp$Timestamp)
df <- tmp
return(df)
}
master <- cleanData(downloadData())
byDay <- function(df) {
day <- df %>%
group_by(date, name) %>%
summarize(day_total = sum(activity))
return(day)
}
cumulativeHour <- function(df) {
temp <- df$activity
for(i in 2:length(temp)) {
temp[i] = temp[i] + temp[i-1]
}
df$cumulative <- temp
return(df)
}
scaleToDay <- function(index) {
df <- master
df$date <- as.Date(df$Timestamp)
tmp <- df %>%
group_by(date, name) %>%
summarize(max_value = max(activity, na.rm = T), min_value = min(activity, na.rm = T), abs_max = max(abs(activity)))
joined <- df %>%
left_join(tmp)
scaled <- joined[[index]]
scaled <- (joined[[index]] - joined$min_value)/(joined$max_value - joined$min_value)
df[[ncol(df) + 1]] <- scaled
names(df[[ncol(df)]]) <- 'scaledActivity'
return (df)
}
scaleCumulative <- function(df) {
df$date <- as.Date(df$Timestamp)
tmp <- df %>%
group_by(date, name) %>%
summarize(max_value = max(cumulative, na.rm = T), min_value = min(cumulative, na.rm = T), abs_max = max(abs(cumulative)))
joined <- df %>%
left_join(tmp)
scaled <- joined$cumulative
scaled <- (joined$cumulative - joined$min_value)/(joined$max_value - joined$min_value)
df[[ncol(df) + 1]] <- scaled
names(df)[ncol(df)] <- 'scaledCumulative'
return (df)
}
output$plot1 <- renderPlotly({
sub <- master[master$name == input$hive_id,]
dfs <- split(sub, interaction(sub$date), drop = T)
p <- plot_ly() %>%
layout(xaxis = list(title = 'Hour of Day'),
yaxis = list(title = 'Hive Activity'), paper_bgcolor = 'rgba(0,0,0,0)',
plot_bgcolor = 'rgba(0,0,0,0)') %>%
layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE)) %>%
config(displayModeBar = F, showLink = F)
for (i in 1:length(dfs)) {
sub = dfs[[i]]
if(max(sub$hour) > 16 & min(sub$hour) < 8) {
p <- p %>% add_trace(x = sub$hour, y = sub$activity, type = 'scatter',mode = 'lines',text = paste("Date: ", sub$date), name = sub$date)
}
}
p
})
output$plot2 <- renderPlotly({
sub <- master[master$name == input$hive_id,]
p <- plot_ly(x = sub$Timestamp, y = as.numeric(scale(sub$brood)), type = 'scatter', mode = 'none', fill = 'tozeroy',
fillcolor = 'rgba(0, 235, 0, 0.5)', plot_bgcolor = 'rgba(0,0,0,0)') %>%
layout(hovermode = 'compare', xaxis = list(title = 'Day'),
yaxis = list(title = 'Brood'), paper_bgcolor = 'rgba(0,0,0,0)',
plot_bgcolor = 'rgba(0,0,0,0)') %>%
layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE)) %>%
config(displayModeBar = F, showLink = F)
p
})
output$plot3 <- renderPlotly({
sub <- master[master$name == input$hive_id,]
p <- plot_ly(x = sub$Timestamp, y = as.numeric(scale(sub$weight)), type = 'scatter', mode = 'none', fill = 'tozeroy',
fillcolor = 'rgba(0, 235, 0, 0.5)', plot_bgcolor = 'rgba(0,0,0,0)') %>%
layout(hovermode = 'compare', xaxis = list(title = 'Day'),
yaxis = list(title = 'Hive Weight'), paper_bgcolor = 'rgba(0,0,0,0)',
plot_bgcolor = 'rgba(0,0,0,0)') %>%
layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE)) %>%
config(displayModeBar = F, showLink = F)
p
})
output$plot4 <- renderPlotly({
sub <- master[master$name == input$hive_id,]
dfs <- split(sub, interaction(sub$date), drop = T)
sub <- dfs[[1]]
sub <- cumulativeHour(sub)
sub <- scaleCumulative(sub)
sub$age <- sub$date - min(sub$date)
p <- plot_ly() %>%
layout(xaxis = list(title = 'Hour of Day'),
yaxis = list(title = 'Hive Activity'), paper_bgcolor = 'rgba(0,0,0,0)',
plot_bgcolor = 'rgba(0,0,0,0)') %>%
layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE)) %>%
config(displayModeBar = F, showLink = F)
for (i in 1:length(dfs)) {
sub <- dfs[[i]]
sub <- cumulativeHour(sub)
sub <- scaleCumulative(sub)
if(max(sub$hour) > 16 & min(sub$hour) < 8){
p <- p %>% add_trace(x = sub$hour, y = sub$cumulative, type = 'scatter',mode = 'lines', text = paste("Date: ", sub$date), name = sub$date)
}
}
p
})
output$hiveMap <- renderLeaflet({
m <- leaflet(master) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(stroke=FALSE,fillOpacity = 1,label = ~name) %>%
addMiniMap()
m
})
})
shinyApp(server = server, ui = ui)
pca_nbg <- prcomp(nbg2, rank. = 2, center=T, scale. = T)
#scaled <- scale(pca_nbg$x)
full_nbg <- cbind(pca_nbg$x, nbg_names)
plot_ly(x=full_nbg[,1],
y=full_nbg[,2],
marker=list(color = (rowSums(nbg2)),
colorscale = c('#FFE1A1', '#683531'),
showscale=T),
type='scatter3d',
text = full_nbg$LAST
)
#scaled <- scale(pca_nbg$x)
full_nbg <- cbind(pca_nbg$x, nbg_names)
plot_ly(x=full_nbg[,1],
y=full_nbg[,2],
marker=list(color = (rowSums(nbg2)),
colorscale = c('#FFE1A1', '#683531'),
showscale=T),
text = full_nbg$LAST
)
View(nbg2)
View(nbg)
View(full_nbg)
View(full_nbg)
View(nbg2)
library(readxl)
hcg <- read_excel("~/Downloads/boone combine sheets (1).xlsx")
hcg <- hcg[,-length(hcg)]
hcg <- hcg[3:15,]
#bg stands for big guys
#nbg stands for not big guys
bg <- hcg[is.na(hcg$`40.0`),]
nbg <- hcg[!is.na(hcg$`40.0`),]
bg2 <- bg[,7:length(nbg)]
bg2 <- bg2[,-1]
bg2 <- apply(bg2,2, as.numeric)
bg_names <- bg[,1:2]
bg2[,1:5] <- bg2[,1:5]*-1
#NEED TO ADD INDEXES OR PRESERVE NAMES for plotting
#pca may not be appropriate at all since some measures care about smallest time some care about largest
#i think just plot aggregate ranking
nbg2 <- nbg[,7:14]
nbg2 <- apply(nbg2, 2, as.numeric)
nbg2 <- nbg2[,-(2:3)]
nbg_names <- nbg[,1:2]
nbg_names <- nbg_names[-6,]
nbg2 <- nbg2[-6,]
pca_nbg <- prcomp(nbg2, rank. = 2, center=T, scale. = T)
full_nbg <- cbind(pca_nbg$x, nbg_names)
plot_ly(x=full_nbg[,1],
y=full_nbg[,2],
marker=list(color = (rowSums(nbg2)),
colorscale = c('#FFE1A1', '#683531'),
showscale=T),
text = full_nbg$LAST
)
View(nbg)
pca_nbg <- prcomp(nbg2[,-length(nbg2)], rank. = 2, center=T, scale. = T)
full_nbg <- cbind(pca_nbg$x, nbg_names)
plot_ly(x=full_nbg[,1],
y=full_nbg[,2],
marker=list(color = (rowSums(nbg2)),
colorscale = c('#FFE1A1', '#683531'),
showscale=T),
text = full_nbg$LAST
)
nbg2 <- nbg2[,-length(nbg2)]
pca_nbg <- prcomp(nbg2, rank. = 2, center=T, scale. = T)
full_nbg <- cbind(pca_nbg$x, nbg_names)
plot_ly(x=full_nbg[,1],
y=full_nbg[,2],
marker=list(color = (rowSums(nbg2)),
colorscale = c('#FFE1A1', '#683531'),
showscale=T),
text = full_nbg$LAST
)
View(nbg2)
nbg2 <- nbg2[,-6]
pca_nbg <- prcomp(nbg2, rank. = 2, center=T, scale. = T)
full_nbg <- cbind(pca_nbg$x, nbg_names)
plot_ly(x=full_nbg[,1],
y=full_nbg[,2],
marker=list(color = (rowSums(nbg2)),
colorscale = c('#FFE1A1', '#683531'),
showscale=T),
text = full_nbg$LAST
)
View(nbg_names)
View(nbg)
library(readxl)
hcg <- read_excel("~/Downloads/boone combine sheets (1).xlsx")
hcg <- hcg[,-length(hcg)]
hcg <- hcg[3:15,]
#bg stands for big guys
#nbg stands for not big guys
bg <- hcg[is.na(hcg$`40.0`),]
nbg <- hcg[!is.na(hcg$`40.0`),]
bg2 <- bg[,7:length(nbg)]
bg2 <- bg2[,-1]
bg2 <- apply(bg2,2, as.numeric)
bg_names <- bg[,1:2]
bg2[,1:5] <- bg2[,1:5]*-1
#NEED TO ADD INDEXES OR PRESERVE NAMES for plotting
#pca may not be appropriate at all since some measures care about smallest time some care about largest
#i think just plot aggregate ranking
nbg2 <- nbg[,7:14]
nbg2 <- apply(nbg2, 2, as.numeric)
nbg2 <- nbg2[,-(2:3)]
nbg_names <- nbg[,1:2]
nbg_names <- nbg_names[-6,]
#nbg2[,1:5] <- nbg2[,1:5]*-1
#nbg2 <- nbg2[-6,]
#pca_nbg <- prcomp(nbg2, center = T, scale. = T, rank. = 2)
#plot(pca_nbg$x[,1], pca_nbg$x[,2])
pca <- prcomp(bg2, center = T, scale. = T, rank. = 2)
plot(pca$x[,1], pca$x[,2])
library(ggplot2)
bg_stack <- stack(as.data.frame(bg2))
ggplot(data = bg_stack) + geom_density(aes(x=values, color = ind)) + facet_wrap(~ind) + theme_minimal()
nbg_stack <- stack(as.data.frame(nbg2))
ggplot(data = nbg_stack, aes(x=values, color = ind)) + geom_density() + facet_wrap(~ind) + theme_minimal()
#maybe show means
library(plotly)
nbg2 <- nbg2[-6,]
pca_nbg <- prcomp(nbg2, rank. = 2, center=T, scale. = T)
full_nbg <- cbind(pca_nbg$x, nbg_names)
plot_ly(x=full_nbg[,1],
y=full_nbg[,2],
marker=list(color = (rowSums(nbg2)*-1),
colorscale = c('#FFE1A1', '#683531'),
showscale=T),
text = full_nbg$LAST
)
pca_bg <- prcomp(bg2, rank. = 3)
#scaled <- scale(pca_nbg$x)
full_bg <- cbind(pca_bg$x, bg_names)
plot_ly(x=full_bg[,1],
y=full_bg[,2],
z=full_bg[,3],
marker=list(color = (rowSums(bg2)),
colorscale = c('#FFE1A1', '#683531'),
showscale=T),
type='scatter3d',
text = full_bg$LAST
)
View(bg)
pca_bg <- prcomp(bg2, rank. = 2, center=T, scale. = T)
#scaled <- scale(pca_nbg$x)
full_bg <- cbind(pca_bg$x, bg_names)
plot_ly(x=full_bg[,1],
y=full_bg[,2],
marker=list(color = (rowSums(bg2)*-1),
colorscale = c('#FFE1A1', '#683531'),
showscale=T),
type='scatter3d',
text = full_bg$LAST
)
plot_ly(x=full_bg[,1],
y=full_bg[,2],
marker=list(color = (rowSums(bg2)*-1),
colorscale = c('#FFE1A1', '#683531'),
showscale=T),
text = full_bg$LAST
)
proc.time
proc.time()
t <- proc.time()
library(readr)
library(dplyr)
library(tidyr)
library(RColorBrewer)
args <- commandArgs()
name <- args[6]
cars <- read_csv(name)
cars <- cars %>%
gather(class, value, c(`Small/Sporty/ Compact/Large Sedan`, `Sports Car`, SUV, Wagon, Minivan, Pickup)) %>%
filter(value == 1)
cars$class <- ifelse(cars$class == 'Small/Sporty/ Compact/Large Sedan', 'Compact', cars$class)
cars$Weight <- as.numeric(cars$Weight)
colors <- with(cars,
data.frame(class = levels(factor(class)),
color = I(brewer.pal(nlevels(factor(cars$class)),
name = 'Accent'))))
plot(cars$HP,
cars$`City MPG`,
xlab = 'HP',
ylab = 'City MPG',
main = 'Horsepower vs. City MPG',
col = colors$color[match(cars$class, colors$class)],
pch = 15,
cex = cars$Weight/1500)
legend(x = 'topright',
legend = as.character(colors$class),
col = colors$color,
pch = 15,
bty = 'n')
t-proc
t <- proc.time()
library(readr)
library(dplyr)
library(tidyr)
library(RColorBrewer)
args <- commandArgs()
name <- args[6]
cars <- read_csv(name)
cars <- cars %>%
gather(class, value, c(`Small/Sporty/ Compact/Large Sedan`, `Sports Car`, SUV, Wagon, Minivan, Pickup)) %>%
filter(value == 1)
cars$class <- ifelse(cars$class == 'Small/Sporty/ Compact/Large Sedan', 'Compact', cars$class)
cars$Weight <- as.numeric(cars$Weight)
colors <- with(cars,
data.frame(class = levels(factor(class)),
color = I(brewer.pal(nlevels(factor(cars$class)),
name = 'Accent'))))
plot(cars$HP,
cars$`City MPG`,
xlab = 'HP',
ylab = 'City MPG',
main = 'Horsepower vs. City MPG',
col = colors$color[match(cars$class, colors$class)],
pch = 15,
cex = cars$Weight/1500)
legend(x = 'topright',
legend = as.character(colors$class),
col = colors$color,
pch = 15,
bty = 'n')
t-proc.time()
proc.time()
plot(cars$HP,
cars$`City MPG`,
xlab = 'HP',
ylab = 'City MPG',
main = 'Horsepower vs. City MPG',
col = colors$color[match(cars$class, colors$class)],
pch = 15,
cex = cars$Weight/1500)
legend(x = 'topright',
legend = as.character(colors$class),
col = colors$color,
pch = 15,
bty = 'n')
t <- proc.time()
library(readr)
library(dplyr)
library(tidyr)
library(RColorBrewer)
#args <- commandArgs()
#name <- args[6]
cars <- read_csv('~/Desktop/CS5270/cars04.csv')
cars <- cars %>%
gather(class, value, c(`Small/Sporty/ Compact/Large Sedan`, `Sports Car`, SUV, Wagon, Minivan, Pickup)) %>%
filter(value == 1)
cars$class <- ifelse(cars$class == 'Small/Sporty/ Compact/Large Sedan', 'Compact', cars$class)
cars$Weight <- as.numeric(cars$Weight)
colors <- with(cars,
data.frame(class = levels(factor(class)),
color = I(brewer.pal(nlevels(factor(cars$class)),
name = 'Accent'))))
plot(cars$HP,
cars$`City MPG`,
xlab = 'HP',
ylab = 'City MPG',
main = 'Horsepower vs. City MPG',
col = colors$color[match(cars$class, colors$class)],
pch = 15,
cex = cars$Weight/1500)
legend(x = 'topright',
legend = as.character(colors$class),
col = colors$color,
pch = 15,
bty = 'n')
t-proc.time()
library(readr)
library(dplyr)
library(tidyr)
library(RColorBrewer)
t <- proc.time()
#args <- commandArgs()
#name <- args[6]
cars <- read_csv('~/Desktop/CS5270/cars04.csv')
cars <- cars %>%
gather(class, value, c(`Small/Sporty/ Compact/Large Sedan`, `Sports Car`, SUV, Wagon, Minivan, Pickup)) %>%
filter(value == 1)
cars$class <- ifelse(cars$class == 'Small/Sporty/ Compact/Large Sedan', 'Compact', cars$class)
cars$Weight <- as.numeric(cars$Weight)
colors <- with(cars,
data.frame(class = levels(factor(class)),
color = I(brewer.pal(nlevels(factor(cars$class)),
name = 'Accent'))))
plot(cars$HP,
cars$`City MPG`,
xlab = 'HP',
ylab = 'City MPG',
main = 'Horsepower vs. City MPG',
col = colors$color[match(cars$class, colors$class)],
pch = 15,
cex = cars$Weight/1500)
legend(x = 'topright',
legend = as.character(colors$class),
col = colors$color,
pch = 15,
bty = 'n')
t-proc.time()
cars04 <- read.csv("~/Desktop/CS5270/cars04.csv")
View(cars04)
t <- proc.time()
read.csv("~/Desktop/CS5270/cars04.csv")
t-proc.time()
t <- proc.time()
cars <- read_csv('~/Desktop/CS5270/cars04.csv')
t-proc.time()
commandArgs(TRUE)
commandArgs(TRUE)
#fill na?
library(readr)
library(dplyr)
library(tidyr)
library(RColorBrewer)
#t <- proc.time()
args <- commandArgs(T)
print(args)
name <- args[1]
cars <- read_csv(name)
print(cars)
cars <- cars %>%
gather(class, value, c(`Small/Sporty/ Compact/Large Sedan`, `Sports Car`, SUV, Wagon, Minivan, Pickup)) %>%
filter(value == 1)
cars$class <- ifelse(cars$class == 'Small/Sporty/ Compact/Large Sedan', 'Compact', cars$class)
cars$Weight <- as.numeric(cars$Weight)
cars$Weight[is.na(cars$Weight)] <- median(cars$Weight)
cars$Weight <- as.numeric(cars$Weight)
colors <- with(cars,
data.frame(class = levels(factor(class)),
color = I(brewer.pal(nlevels(factor(cars$class)),
name = 'Accent'))))
plot(cars$HP,
cars$`City MPG`,
xlab = 'HP',
ylab = 'City MPG',
main = 'Horsepower vs. City MPG',
col = colors$color[match(cars$class, colors$class)],
pch = 15,
cex = cars$Weight/1500)
legend(x = 'topright',
legend = as.character(colors$class),
col = colors$color,
pch = 15,
bty = 'n')
p <- plot(cars$HP,
cars$`City MPG`,
xlab = 'HP',
ylab = 'City MPG',
main = 'Horsepower vs. City MPG',
col = colors$color[match(cars$class, colors$class)],
pch = 15,
cex = cars$Weight/1500)
p
p <- plot(cars$HP,
cars$`City MPG`,
xlab = 'HP',
ylab = 'City MPG',
main = 'Horsepower vs. City MPG',
col = colors$color[match(cars$class, colors$class)],
pch = 15,
cex = cars$Weight/1500)
p
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(fpp2) # You will always load this package before analyzing any time series data.
tute1 <- read.csv("tute1.csv", header=TRUE)
mytimeseries <- ts(tute1[,-1], start=1981, frequency=4)
# The [,-1] removes the first column which contains the quarters as we don’t need them now.
autoplot(mytimeseries, facets=TRUE)
ggseasonplot(mytimeseries)
ggsubseriesplot(mytimeseries)
gglagplot(mytimeseries)
ggAcf(mytimeseries)
ggseasonplot(hsales)
ggsubseriesplot(usdeaths)
gglagplot(bricksq)
ggAcf(sunspotarea)
ddj <- diff(dj)
par(mfrow=c(1,2))
plot(ddj)
plot(ddj)
plot(ddj)
plot(ddj)
par(mfrow=c(2))
plot(ddj)
ggAcf(ddj)
devtools::install_github("r-dbi/odbc")
